{"version":3,"sources":["meteor://ðŸ’»app/packages/remcoder_chronos/packages/remcoder_chronos.js"],"names":[],"mappingsfile":"/packages/remcoder_chronos.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/remcoder:chronos/remcoder:chronos.js                                                //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nvar _timers = {};                                                                               // 1\n                                                                                                // 2\nfunction Timer(interval) {                                                                      // 3\n  this.interval = interval || 1000;                                                             // 4\n  this.time = new ReactiveVar(0);                                                               // 5\n}                                                                                               // 6\n                                                                                                // 7\nTimer.prototype.start = function() {                                                            // 8\n  if (this._timer) throw new Error('Trying to start Chronos.Timer but it is already running.'); // 9\n  this.time.set(new Date());                                                                    // 10\n                                                                                                // 11\n                                                                                                // 12\n  this._timer = setInterval(Meteor.bindEnvironment(function() {                                 // 13\n    //console.log('tick', this._timer);                                                         // 14\n    this.time.set(new Date());                                                                  // 15\n                                                                                                // 16\n  }.bind(this)), this.interval);                                                                // 17\n};                                                                                              // 18\n                                                                                                // 19\nTimer.prototype.stop = function() {                                                             // 20\n  //console.log('stopping timer');                                                              // 21\n  clearInterval(this._timer);                                                                   // 22\n  this._timer = null;                                                                           // 23\n};                                                                                              // 24\n                                                                                                // 25\nfunction liveUpdate(interval) {                                                                 // 26\n  // get current reactive context                                                               // 27\n  var comp = Tracker.currentComputation;                                                        // 28\n  if (!comp)                                                                                    // 29\n    return; // no nothing when used outsite a reactive context                                  // 30\n                                                                                                // 31\n  // only create one timer per reactive context to prevent stacking of timers                   // 32\n  var cid =  comp && comp._id;                                                                  // 33\n  if (!_timers[cid]) {                                                                          // 34\n    var timer = new Timer(interval);                                                            // 35\n    _timers[cid] = timer;                                                                       // 36\n                                                                                                // 37\n    // add destroy method that stops the timer and removes itself from the list                 // 38\n    timer.destroy = function() {                                                                // 39\n      timer.stop();                                                                             // 40\n      delete _timers[cid];                                                                      // 41\n    };                                                                                          // 42\n                                                                                                // 43\n    timer.start();                                                                              // 44\n  }                                                                                             // 45\n                                                                                                // 46\n  // make sure to stop and delete the attached timer when the computation is stopped            // 47\n  comp.onInvalidate(function() {                                                                // 48\n    //console.log('onInvalidated',comp);                                                        // 49\n    if (comp.stopped && _timers[cid]) {                                                         // 50\n      //console.log('computation stopped');                                                     // 51\n      _timers[cid].destroy();                                                                   // 52\n    }                                                                                           // 53\n  });                                                                                           // 54\n                                                                                                // 55\n  _timers[cid].time.dep.depend(comp); // make dependent on time                                 // 56\n                                                                                                // 57\n  //console.log(_timers);                                                                       // 58\n  return _timers[cid];                                                                          // 59\n}                                                                                               // 60\n                                                                                                // 61\n// wrapper for moment.js                                                                        // 62\nfunction liveMoment(/* arguments */) {                                                          // 63\n  // only reactively re-run liveMoment when moment is available                                 // 64\n  if (!moment) return;                                                                          // 65\n                                                                                                // 66\n  liveUpdate();                                                                                 // 67\n  return moment.apply(null, arguments);                                                         // 68\n}                                                                                               // 69\n                                                                                                // 70\nfunction currentTime(interval) {                                                                // 71\n  liveUpdate(interval);                                                                         // 72\n  return new Date();                                                                            // 73\n}                                                                                               // 74\n                                                                                                // 75\n// export global                                                                                // 76\nChronos = {                                                                                     // 77\n                                                                                                // 78\n  // a simple reactive timer                                                                    // 79\n  // usage: var timer = new Timer();                                                            // 80\n  // get current time: timer.time.get();                                                        // 81\n  Timer : Timer,                                                                                // 82\n                                                                                                // 83\n  // handy util func for making reactive contexts live updating in time                         // 84\n  // usage: simply call Chronos.liveUpdate() in your helper to make it execute                  // 85\n  // every interval                                                                             // 86\n  liveUpdate : liveUpdate,                                                                      // 87\n                                                                                                // 88\n  // wrapper for moment.js                                                                      // 89\n  // example usage: Chronos.liveMoment(someTimestamp).fromNow();                                // 90\n  liveMoment: liveMoment,                                                                       // 91\n                                                                                                // 92\n  // get the current time, reactively                                                           // 93\n  currentTime: currentTime,                                                                     // 94\n                                                                                                // 95\n  // for debugging and testing                                                                  // 96\n  _timers : _timers                                                                             // 97\n};                                                                                              // 98\n                                                                                                // 99\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}